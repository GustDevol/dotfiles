(in-package :stumpwm)

;; Start necessary programs
(run-shell-command "sh ~/.config/X11/xprofile")

;; Basic stumpwm window settings
(setf *message-window-gravity* :center
      *input-window-gravity* :center
      *message-window-input-gravity* :top-right
      *window-border-style* :thin
      *message-window-padding* 10
      *maxsize-border-width* 2
      *normal-border-width* 2
      *transient-border-width* 2
      stumpwm::*float-window-border* 4
      stumpwm::*float-window-title-height* 20
      *mouse-focus-policy* :click)
;    *new-window-preferred-frame* :empty)

;; Add modules to load path
(stumpwm:add-to-load-path "~/.config/stumpwm/modules/swm-gaps")
;; Load contrib modules
(load-module "swm-gaps")

;; Set Prefix key to Meta-m
(set-prefix-key (kbd "M-m"))

;; Setting size of Gaps
(setf swm-gaps:*inner-gaps-size* 6)
; (setf swm-gaps:*outer-gaps-size* 6)
;; Set keybind for toggling Gaps
(define-key *root-map* (kbd "T") "toggle-gaps")

;; Command to change gaps on the fly
;; Reset Gap
(defcommand reset-gap () ()
"Reset inner gap to 6"
  (setf swm-gaps:*inner-gaps-size* 6)
  (swm-gaps:toggle-gaps-on))
;; Decrease Gap
(defcommand dec-gap () ()
"Decrease inner gap by 2"
  (if (> swm-gaps:*inner-gaps-size* 0)
    (setf swm-gaps:*inner-gaps-size* (- swm-gaps:*inner-gaps-size* 2)))
  (swm-gaps:toggle-gaps-on))
;; Increase Gap
(defcommand inc-gap () ()
"Increase inner gap by 2"
  (setf swm-gaps:*inner-gaps-size* (+ swm-gaps:*inner-gaps-size* 2))
  (swm-gaps:toggle-gaps-on))
;; Set keybind for changing gaps
(define-key *root-map* (kbd "+") "reset-gap")
(define-key *root-map* (kbd "=") "inc-gap")
(define-key *root-map* (kbd "-") "dec-gap")

;; Setting up Groups/Workspaces name
(defvar *workspaces* (list "1" "2" "3" "4" "5" "6" "7" "8" "9" "10"))
(stumpwm:grename (nth 0 *workspaces*))
;; Create Groups/Workspaces
(dolist (workspace (cdr *workspaces*))
  (stumpwm:gnewbg workspace))
;; Create a floating group
(stumpwm:gnewbg-float "Floaty")

;; Set keymaps for changing groups and moving windows to groups
(defvar *move-group-kbd* (list ")" "!" "@" "#" "$" "%" "^" "&" "*" "("))
(dotimes (y (length *workspaces*))
  (let ((workspace (write-to-string y)))
    (define-key *root-map* (kbd workspace) (concat "gselect " workspace))
    (define-key *root-map* (kbd (nth y *move-group-kbd*)) (concat "gmove-and-follow " workspace))))
;; Keybind to switch / Move to floating group
(define-key *root-map* (kbd "`") "gselect Floaty")
(define-key *root-map* (kbd "~") "gmove-and-follow Floaty")

;; Set keybind for stumpwm exec and dmenu
(define-key *root-map* (kbd "D") "exec")
(define-key *root-map* (kbd "d") "exec dmenu_run")

;; Set keybind for terminal & browser
(define-key *root-map* (kbd "RET") "exec alacritty")
(define-key *root-map* (kbd "w") "exec brave-browser")

;; Set keybind for exiting StumpWM
(defcommand logout () ()
"Command shows a prompt and quits StumpWM based on the response."
  (if 
    (equalp (read-one-line (stumpwm:current-screen) "Quit StumpWM? ") "Y")
      (quit)))
(define-key *root-map* (kbd "X") "logout") ;; Quits StumpWM

;; Set keybind for window & frame management
;; Kill/Delete Window
(define-key *root-map* (kbd "Q") "kill")
(define-key *root-map* (kbd "M-k") "delete")
(define-key *root-map* (kbd "q") "delete")
;; Change frame focus
(define-key *root-map* (kbd "h") "move-focus left")
(define-key *root-map* (kbd "j") "move-focus down")
(define-key *root-map* (kbd "k") "move-focus up")
(define-key *root-map* (kbd "l") "move-focus right")
;; Move focused window to other frame
(define-key *root-map* (kbd "H") "move-window left")
(define-key *root-map* (kbd "J") "move-window down")
(define-key *root-map* (kbd "K") "move-window up")
(define-key *root-map* (kbd "L") "move-window right")
;; Make focused window fullscreen
(define-key *root-map* (kbd "M-f") "fullscreen")

;; Create command and set keybind for checking status of
;; audio, brightness, network & notifications
(defcommand get-audio-status () ()
"Command executes the script stump-audio and gives audio status"
  (echo 
    (concat 
        (run-shell-command "stump-audio spk" t)
        (run-shell-command "stump-audio mic" t))))
(define-key *top-map* (kbd "M-P") "get-audio-status")

(defcommand get-backlight-status () ()
"Command executes xbacklight and gives backlight value"
  (echo
    (concat "Backlight : "
        (run-shell-command "xbacklight" t))))
(define-key *top-map* (kbd "M-B") "get-backlight-status")

(defcommand get-ethernet-status () ()
"Command executes the script stump-network and gives ethernet connection status"
  (echo
    (concat "Ethernet : "
        (run-shell-command "stump-network" t))))
(define-key *top-map* (kbd "M-E") "get-ethernet-status")

(defcommand get-notify-status () ()
"Command checks for the pressence of '/tmp/dnd' file and 
returns status if Do not disturb is active or not"
  (echo 
    (concat "Do Not Disturb : "
      (run-shell-command "[ -f /tmp/dnd ] && echo Yes || echo No" t))))
(define-key *top-map* (kbd "M-N") "get-notify-status")

;; Modeline
(setf stumpwm:*mode-line-timeout* 10)
(stumpwm:toggle-mode-line (stumpwm:current-screen) (stumpwm:current-head))
(setf stumpwm:*screen-mode-line-format*
      (list "%g | "
            "%W"
            "^>"
            ; '(:eval (concat (run-shell-command "stump-network" t) " | "))
            '(:eval (concat " | " (run-shell-command "stump-battery" t)))
            '(:eval (concat " | " (run-shell-command "stump-datetime" t)))))

(defcommand modeline-toggle () ()
"Command toggles stump modeline by calling stumpwm:toggle-mode-line.
Defined for easier binding purposes."
  (stumpwm:toggle-mode-line (stumpwm:current-screen) (stumpwm:current-head)))
(define-key *root-map* (kbd "t") "modeline-toggle")

 ; vim: filetype=lisp
